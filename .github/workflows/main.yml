name: Caselaw CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:

  job_lint:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3

    # https://devcenter.heroku.com/articles/getting-started-with-python
    # Match version to Heroku app
    # Keep in sync with Dockerfile and Pipfile
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pipenv
      run: |
        pip install --upgrade pip
        pip install pipenv

    - name: Install dependencies
      run: |
        pipenv sync --dev

    - name: Run Black check
      run: |
        pipenv run black --check .

    - name: Run Flake8 check
      run: |
        mkdir test-reports
        pipenv run flake8 . --output-file test-reports/flake8

    - name: Upload flake test results
      uses: actions/upload-artifact@v3
      with:
          name: flake8-report
          path: test-reports/flake8
      # Use failure() to upload only if failure occurs
      if: failure()

  job_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        # https://hub.docker.com/_/postgres
        # https://devcenter.heroku.com/articles/heroku-postgresql#version-support
        # Match version to Heroku app. Keep in sync with docker-compose.yml
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

    # https://devcenter.heroku.com/articles/getting-started-with-python
    # Match version to Heroku app
    # Keep in sync with Dockerfile and Pipfile
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          pip install --upgrade pip
          pip install pipenv

      - name: Install dependencies
        run: |
          pipenv sync --dev

      - name: Compile assets
        run: |
          pipenv run python manage.py collectstatic --no-input
          pipenv run python manage.py compress --force

      - name: Run tests
        run: pipenv run python manage.py test
