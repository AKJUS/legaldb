# Generated by Django 3.0.7 on 2020-06-10 15:39

from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('notes', models.TextField(blank=True, help_text='Internal notes or description.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='A timestamp of when the object is first created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='A timestamp of the last time when the object was modified.')),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField()),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Internal notes or description.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='A timestamp of when the object is first created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='A timestamp of the last time when the object was modified.')),
                ('url', models.URLField(max_length=2000)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Internal notes or description.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='A timestamp of when the object is first created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='A timestamp of the last time when the object was modified.')),
                ('license', models.CharField(blank=True, help_text='The Creative Commons licence associated to the legal resource.', max_length=50, null=True)),
                ('contributor_name', models.CharField(max_length=120)),
                ('contributor_email', models.EmailField(max_length=254)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Unreviewed'), (2, 'Review in Progress'), (3, 'Published'), (4, 'Rejected')], default=1, help_text='The stage of the review process where the resource is.')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('publication_name', models.CharField(blank=True, max_length=255, null=True)),
                ('publication_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('authors', models.CharField(blank=True, max_length=255, null=True)),
                ('link', models.ForeignKey(help_text='The link to the article.', on_delete=django.db.models.deletion.CASCADE, to='legal_db.Link')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Internal notes or description.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='A timestamp of when the object is first created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='A timestamp of the last time when the object was modified.')),
                ('license', models.CharField(blank=True, help_text='The Creative Commons licence associated to the legal resource.', max_length=50, null=True)),
                ('contributor_name', models.CharField(max_length=120)),
                ('contributor_email', models.EmailField(max_length=254)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Unreviewed'), (2, 'Review in Progress'), (3, 'Published'), (4, 'Rejected')], default=1, help_text='The stage of the review process where the resource is.')),
                ('name', models.CharField(blank=True, help_text='If there are multiple lawsuits between the parties, please just include one here and note the others in the related cases field.', max_length=200, null=True)),
                ('related_cases', models.CharField(blank=True, help_text='If there are multiple lawsuits between the parties in this dispute, please note additional cases here.', max_length=255, null=True)),
                ('courts', models.CharField(help_text='The original court name and/or English translation. If the lawsuit was filed in one court and then went to another court on appeal, please note all relevant courts here.', max_length=255)),
                ('background', models.TextField(blank=True, help_text='Describe the factual information that led to the lawsuit being filed, and explain what claims were filed in the lawsuit.', null=True)),
                ('decision_year', models.PositiveSmallIntegerField(blank=True, help_text='Year of case resolution.', null=True)),
                ('links', models.ManyToManyField(help_text='Include any links to pleadings, briefs, and opinions in the lawsuit, as well as blog posts, academic articles, or other relevant materials.', to='legal_db.Link')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
